{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,mCAA8BL,EAAMI,QAAQE,OAAnCN,EAAMI,QAAQC,IACvB,kCAAML,EAAMI,QAAQG,aCNfC,G,MAAW,SAAAR,GAAK,OAEzB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLdM,G,MAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAcC,EAAlB,EAAkBA,aAAlB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC+BjEG,G,wDA9Bb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAW,GACXS,YAAc,IALJ,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAWc,S,oBAG3C,WAAU,IAAD,SAE2BE,KAAKR,MAA/BR,EAFD,EAECA,SAAUS,EAFX,EAEWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAEpG,OACE,sBAAK3B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACjG,cAAC,EAAD,CAAUvB,SAAUiB,W,GAzBVO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.33a01ae2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <h2 key={props.monster.id}> { props.monster.name }</h2>\r\n        <p> { props.monster.email }</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n \r\n    <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n    ))}\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ( { placeholder , handleChange } ) => (\r\n    <input className='search' type='search' placeholder={placeholder} onChange={handleChange}/>\r\n)","import React, {Component} from 'react';   \nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters : [],\n      searchField : ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}));\n}\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex</h1>\n        <SearchBox placeholder='Search monsters' handleChange={e => this.setState({searchField: e.target.value})}/>\n        <CardList monsters={filteredMonsters}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}